2025-05-12 04:14:09,148 - __main__ - INFO - Starting Flask application in test mode with application context fixes
2025-05-12 04:14:12,859 - document_processor - INFO - MongoDB standard indexes created successfully
2025-05-12 04:14:12,860 - document_processor - INFO - MongoDB connected successfully for document storage
2025-05-12 04:14:12,861 - document_processor - INFO - RAG [Processor]: Azure OpenAI credentials found for embeddings (deployment: text-embedding-3-large)
2025-05-12 04:14:15,137 - ChatMemoryManager - INFO - Connected to MongoDB Atlas successfully
2025-05-12 04:14:15,577 - ChatMemoryManager - INFO - Added userId index for vector search compatibility
2025-05-12 04:14:15,577 - ChatMemoryManager - INFO - MongoDB standard indexes created successfully
2025-05-12 04:14:15,577 - ChatMemoryManager - INFO - 
MEMORY: MongoDB Atlas Search Configuration
----------------------------------------------------------------------

1. LONG-TERM MEMORY INDEXES (user_profiles collection)
----------------------------------------------------------------------
For the long-term memory functionality to work properly, you need to create TWO indexes in MongoDB Atlas:

1. First index: Vector Search Index for semantic similarity (REQUIRED)
   - Index Name: 'memory_vector_index'
   - Database and Collection: 'chatbot_memory_large.user_profiles'
   - JSON Definition:

{
  "fields": [
    {
      "type": "vector",
      "path": "preferences_embeddings.embedding",
      "numDimensions": 3072,
      "similarity": "cosine"
    },
    {
      "path": "userId",
      "type": "filter"
    }
  ]
}

2. Second index: Standard Search Index for filtering (REQUIRED)
   - Index Name: 'memory_standard_filter_index'
   - Database and Collection: 'chatbot_memory_large.user_profiles'
   - JSON Definition:

{
  "mappings": {
    "dynamic": false,
    "fields": {
      "userId": {
        "type": "token"
      }
    }
  }
}

2. SHORT-TERM MEMORY INDEXES (chat_messages collection)
----------------------------------------------------------------------
For the short-term memory functionality, you need to create TWO indexes on the chat_messages collection:

1. First index: Vector Search Index for semantic similarity (REQUIRED)
   - Index Name: 'chat_messages_vector_index'
   - Database and Collection: 'chatbot_memory_large.chat_messages'
   - JSON Definition:

{
  "fields": [
    {
      "type": "vector",
      "path": "embedding",
      "numDimensions": 3072,
      "similarity": "cosine"
    },
    {
      "path": "session_id",
      "type": "filter"
    },
    {
      "path": "userId",
      "type": "filter"
    }
  ]
}

2. Second index: Standard Search Index for filtering (REQUIRED)
   - Index Name: 'chat_messages_standard_index'
   - Database and Collection: 'chatbot_memory_large.chat_messages'
   - JSON Definition:

{
  "mappings": {
    "dynamic": false,
    "fields": {
      "session_id": { "type": "token" },
      "userId": { "type": "token" }
    }
  }
}

Step-by-step instructions:
1. Go to MongoDB Atlas Console (https://cloud.mongodb.com)
2. Select your cluster and navigate to the 'Search' tab
3. Click 'Create Index' and choose 'JSON Editor'
4. Paste each index definition, set the appropriate index name
5. Set Database and Collection to the appropriate values
6. Click 'Create Index'
7. Repeat for each index

Note: The old 'short_term_memory_vector_index' on the chat_sessions collection is no longer needed
and has been replaced by the new indexes on the chat_messages collection.
----------------------------------------------------------------------

2025-05-12 04:14:15,661 - ChatMemoryManager - INFO - Azure OpenAI client initialized successfully for embeddings (deployment: text-embedding-3-large)
2025-05-12 04:14:15,682 - ChatMemoryManager - INFO - OpenRouter client initialized successfully for chat
2025-05-12 04:14:15,682 - document_processor - INFO - RAG [Processor]: Using Azure OpenAI for embeddings via ChatMemoryManager
2025-05-12 04:14:15,683 - root - INFO - RAG functionality enabled
2025-05-12 04:14:15,740 - azure.core.pipeline.policies.http_logging_policy - INFO - Request URL: 'https://gloriamundoblobs.blob.core.windows.net/gloriamundoblobs?restype=REDACTED'
Request method: 'GET'
Request headers:
    'x-ms-version': 'REDACTED'
    'Accept': 'application/xml'
    'User-Agent': 'azsdk-python-storage-blob/12.25.1 Python/3.11.10 (Linux-6.2.16-x86_64-with-glibc2.40)'
    'x-ms-date': 'REDACTED'
    'x-ms-client-request-id': '91392b87-2ee7-11f0-bff7-eb62e530244b'
    'Authorization': 'REDACTED'
No body was attached to the request
2025-05-12 04:14:16,012 - azure.core.pipeline.policies.http_logging_policy - INFO - Response status: 200
Response headers:
    'Content-Length': '0'
    'Last-Modified': 'Fri, 18 Apr 2025 02:02:59 GMT'
    'ETag': '"0x8DD7E1D2529C084"'
    'Vary': 'REDACTED'
    'Server': 'Windows-Azure-Blob/1.0 Microsoft-HTTPAPI/2.0'
    'x-ms-request-id': '3827bdfe-601e-0047-19f4-c2461a000000'
    'x-ms-client-request-id': '91392b87-2ee7-11f0-bff7-eb62e530244b'
    'x-ms-version': 'REDACTED'
    'x-ms-lease-status': 'REDACTED'
    'x-ms-lease-state': 'REDACTED'
    'x-ms-has-immutability-policy': 'REDACTED'
    'x-ms-has-legal-hold': 'REDACTED'
    'x-ms-immutable-storage-with-versioning-enabled': 'REDACTED'
    'x-ms-blob-public-access': 'REDACTED'
    'x-ms-default-encryption-scope': 'REDACTED'
    'x-ms-deny-encryption-scope-override': 'REDACTED'
    'Date': 'Mon, 12 May 2025 04:14:15 GMT'
2025-05-12 04:14:16,013 - app - INFO - Container gloriamundoblobs exists
2025-05-12 04:14:16,013 - app - INFO - Azure Blob Storage initialized successfully for container: gloriamundoblobs
2025-05-12 04:14:16,808 - app - INFO - Checking if OpenRouter model migrations are needed...
2025-05-12 04:14:17,048 - app - INFO - OpenRouterModel table already exists, skipping migrations
To make Google authentication work:
1. Go to https://console.cloud.google.com/apis/credentials
2. Create a new OAuth 2.0 Client ID
3. Add https://4a610261-7207-4683-9b02-bd1d56e8f409-00-192aji1826cp4.picard.replit.dev/google_login/callback to Authorized redirect URIs

For detailed instructions, see:
https://docs.replit.com/additional-resources/google-auth-in-flask#set-up-your-oauth-app--client

2025-05-12 04:14:17,178 - app - INFO - Google Auth blueprint registered successfully
2025-05-12 04:14:18,884 - stripe_config - INFO - Stripe initialized successfully
2025-05-12 04:14:18,884 - stripe_config - INFO - Stripe initialized successfully
2025-05-12 04:14:18,889 - app - INFO - Billing blueprint registered successfully with prefix /billing
2025-05-12 04:14:18,966 - app - INFO - Affiliate blueprint registered successfully with prefix /affiliate
2025-05-12 04:14:18,967 - app - INFO - Initializing background scheduler...
2025-05-12 04:14:18,970 - apscheduler.scheduler - INFO - Adding job tentatively -- it will be properly scheduled when the scheduler starts
2025-05-12 04:14:18,974 - apscheduler.scheduler - INFO - Adding job tentatively -- it will be properly scheduled when the scheduler starts
2025-05-12 04:14:18,974 - apscheduler.scheduler - INFO - Added job "scheduled_price_update_job" to job store "default"
2025-05-12 04:14:18,975 - apscheduler.scheduler - INFO - Added job "scheduled_price_update_job" to job store "default"
2025-05-12 04:14:18,975 - apscheduler.scheduler - INFO - Scheduler started
2025-05-12 04:14:18,977 - app - INFO - Background scheduler started successfully
