Please fix the conversation sidebar and automatic title summarization feature based on the following issues and requirements:

Overall Goal:
The sidebar should correctly list all existing conversations (newest first), update with new conversations, and automatically generate/update titles for conversations after the first user-assistant exchange. The "Demo Conversation" placeholder should be removed entirely; the sidebar should be blank if no conversations exist.

1. Backend Changes (app.py):

Fix /conversations Route:
Remove Demo/First Logic: Delete the existing logic in the /conversations route that creates a "Demo Conversation" or only fetches Conversation.query.first().
Fetch All Conversations: Modify the route to query the database for all Conversation records. Order them by created_at descending (newest first).
(Note: User-specific filtering will be added later, for now fetch all).
Format Response: For each conversation found, create a dictionary containing id, title (use "New Conversation" if the title is null/empty in the DB), and created_at (formatted as an ISO string using .isoformat()).
Return List: Return a JSON response containing a list under the key "conversations". If no conversations are found in the database, return an empty list [] for "conversations". Do not create a demo entry.
Example Implementation: Replace the current /conversations function body with something similar to this:
Python

@app.route('/conversations', methods=['GET'])
def get_conversations():
    try:
        from models import Conversation # Make sure Conversation model is imported
        # --- TODO: Add user filtering here later ---

        # --- Fetch all conversations, newest first ---
        all_conversations = Conversation.query.order_by(Conversation.created_at.desc()).all()

        conversations_data = [
            {
                "id": convo.id,
                "title": convo.title or "New Conversation", # Default title
                "created_at": convo.created_at.isoformat() # ISO format date
            } for convo in all_conversations
        ]
        logger.info(f"Fetched {len(conversations_data)} conversations for sidebar.")
        return jsonify({"conversations": conversations_data})
    except Exception as e:
        logger.exception("Error getting conversations")
        return jsonify({"conversations": [], "error": str(e)}), 500
Fix /chat Route (SSE Events):
Inside the generate() function within the /chat route:
Ensure the conversation_id (variable current_conv_id in the function) is included in the JSON data payload for both the 'metadata' event and the 'done' event before they are yielded. Example for 'done': yield f"data: {json.dumps({'type': 'done', 'done': True, 'conversation_id': current_conv_id})}\n\n\n"
2. Frontend Changes (static/js/script.js):

Fix Summarization Trigger Condition:
Locate the SSE handling logic within the sendMessageToBackend function.
Find the else if (parsedData.type === 'done') block.
Inside this block, find the if condition that checks messageHistory.length.
Change this condition from messageHistory.length === 3 to messageHistory.length === 2. The check should look like this:
JavaScript

// Inside the 'done' event handler:
const finalConversationId = parsedData.conversation_id || currentConversationId; // Get ID reliably
// ... (add final message to messageHistory array) ...

// Check if this is the first exchange (1 user + 1 assistant = length 2)
if (messageHistory.length === 2 && finalConversationId) {
    console.log("First exchange done, triggering summarization for convo:", finalConversationId);
    summarizeConversation(finalConversationId);
}
Handle New Conversations in Sidebar:
Modify the 'done' event handler block further.
After the check for messageHistory.length === 2, add another check: if the conversation was new (meaning currentConversationId was null before this chat started), refresh the sidebar list to show the newly created conversation.
JavaScript

// Inside the 'done' event handler, AFTER the summarization trigger:

// Check if we just finished the *first message* of a *new* conversation
// We know it's new if messageHistory has only the user and assistant message (length 2)
if (messageHistory.length === 2) {
     console.log("New conversation finished first exchange. Refreshing sidebar.");
     fetchConversations(); // Reload the conversation list from the backend
}

// Reset currentConversationId ONLY IF user clicks "New Chat" button explicitly
// Do NOT reset it here automatically after every message.
Update newChatButton Handler:
Ensure the event listener for newChatButton does the following:
Sets currentConversationId = null;
Clears the messageHistory = []; array.
Clears the main chat display (chatMessages.innerHTML = ...welcome message...).
Removes any 'active' or 'selected' class from all items in the conversationsList.
Update loadConversation Function:
Ensure this function (or the click handler for .conversation-item in fetchConversations) does the following when an item is clicked:
Sets currentConversationId to the clicked item's dataset.id.
Adds an 'active' or 'selected' class to the clicked item and removes it from others.
(Future Improvement): Fetches the full message history for currentConversationId from a new backend endpoint (e.g., /conversation/<id>/messages) and populates chatMessages and messageHistory. For now, just setting the ID and selection is okay for the fix.
Please apply these changes carefully, paying close attention to the logic in /conversations and the condition in the JavaScript 'done' event handler.